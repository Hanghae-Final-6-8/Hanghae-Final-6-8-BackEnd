# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Set properties
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application-prod.yml
      env:
        spring.datasource.url: ${{ secrets.DATABASE_URL }}
        spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
        spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
        cloud.aws.credentials.access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        cloud.aws.credentials.secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        cloud.aws.s3.bucket: ${{ secrets.CLOUD_AWS_S3_BUCKET }}
        cloud.aws.region.static: ${{ secrets.CLOUD_AWS_REGION_STATIC }}
        spring.redis.host : ${{ secrets.AWS_REDIS_HOST }}
        spring.redis.port : 6379
        secret.key : ${{ secrets.JWT_SECRET_KEY }}
        oauth.kakao.client.id: ${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
        oauth.kakao.oauth.request.url: ${{ secrets.OAUTH_KAKAO_OAUTH_REQUEST_URL }}
        oauth.kakao.token.url: ${{ secrets.OAUTH_KAKAO_TOKEN_URL }}
        oauth.kakao.user.info.url: ${{ secrets.OAUTH_KAKAO_USER_INFO_URL }}
        oauth.kakao.redirect.url: ${{ secrets.OAUTH_KAKAO_REDIRECT_URL }}
        
    - name: Build with Gradle
      run: ./gradlew clean build

    # 디렉토리 생성
    - name: Make Directory
      run: mkdir -p deploy

    # Jar 파일 복사
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy
      
    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy
      
    # script files 복사
    - name: Copy script
      run: cp ./scripts/*.sh ./deploy

    # 파일 압축
    - name: Make zip file
      run: zip -r ./springboot-build.zip ./deploy

    # Deploy
    - name: Deploy
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.CLOUD_AWS_REGION_STATIC }}

    - name: Upload to S3
      run: |
        aws s3 cp \
        --region ${{ secrets.CLOUD_AWS_REGION_STATIC }} \
        --acl private \
        ./springboot-build.zip s3://${{ secrets.CLOUD_AWS_S3_BUCKET }}/
      
    - name: CodeDeploy
      run: |
        aws deploy create-deployment \
        --application-name springboot-deploy \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        --deployment-group-name springboot-deploy-group \
        --s3-location bucket=${{ secrets.CLOUD_AWS_S3_BUCKET }},bundleType=zip,key=springboot-build.zip
